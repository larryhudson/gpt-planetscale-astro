---
import Layout from "@src/components/Layout.astro";
import * as db from "@src/utils/db";

const idParam = Astro.params.id;
if (!idParam) return Astro.redirect("/conversations");

const id = parseInt(idParam);

if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const type = formData.get("type");
  const action = formData.get("action") || "addMessage";
  if (action === "getGptMessage") {
    await db.getGptMessageForConversation(id);
  } else {
    const content = formData.get("content");
    const messageData = {
      type,
      content,
      conversation_id: id,
    } as db.Message;
    await db.createMessage(messageData);
  }
}

const conversation = await db.getConversationById(id);
const messages = await db.getMessagesForConversation(id);
const systemPrompt = await db.getSystemPromptById(
  conversation.system_prompt_id
);

const messagesInGptFormat = [
  {
    role: "system",
    content: systemPrompt.content,
  },
  ...messages.map((message) => {
    return {
      role: message.type,
      content: message.content,
    };
  }),
];
---

<Layout>
  <h1>Conversation: {conversation.name}</h1>

  <div id="messages">
    {
      messages.map((message) => (
        <section data-message-container>
          <strong>{message.type}</strong>:{" "}
          <span data-content>{message.content}</span>
          <button data-action="select" type="button">
            Select
          </button>
        </section>
      ))
    }
  </div>

  <div
    id="previous-messages-data"
    data-messages={JSON.stringify(messagesInGptFormat)}
  >
  </div>

  <div id="current-chat">
    <p id="current-chat-content"></p>
  </div>

  <form method="POST">
    <button type="submit" name="action" value="getGptMessage"
      >Get GPT response</button
    >
  </form>

  <form id="new-message-form" method="POST">
    <input type="hidden" name="type" value="user" />
    <label>
      Write your message:
      <textarea name="content"></textarea>
    </label>
    <button type="submit">Add</button>
  </form>

  <script>
    const selectButtons = document.querySelectorAll("[data-action=select]");
    selectButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const contentElement =
          button.parentElement.querySelector("[data-content]");
        window.getSelection().selectAllChildren(contentElement);
      });
    });
  </script>
</Layout>

<style>
  section {
    margin-bottom: 1rem;
  }

  textarea {
    display: block;
    width: 100%;
  }

  /* styles for chat interface */
  #messages {
    display: flex;
    flex-direction: column;
    height: 100%;
    overflow-y: scroll;
  }

  #messages section {
    margin-bottom: 1rem;
  }

  /* keep new message form fixed at bottom of screen */
  #new-message-form {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    padding: 1rem;
    background: white;
    display: flex;
    flex-direction: column;
  }

  /* add padding so that the fixed item isn't overlapping anything */
  body {
    padding-bottom: 200px;
  }

  #new-message-form textarea {
    height: 100px;
  }

  #new-message-form button {
    margin-top: 1rem;
  }

  #current-chat-content {
    font-weight: bold;
  }

  /* make buttons big and clickable */
  button {
    padding: 1rem;
    font-size: 1.5rem;
  }

  button:active {
    background: #eee;
  }

  button:focus {
    outline: none;
  }

  button:disabled {
    opacity: 0.5;
  }
</style>
